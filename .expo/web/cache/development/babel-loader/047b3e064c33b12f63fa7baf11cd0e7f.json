{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as helpers from \"./helpers\";\nexport default function createCompatNavigationProp(navigation, state, context, _isFirstRouteInParent) {\n  context.parent = context.parent || {};\n  context.subscriptions = context.subscriptions || {\n    didFocus: new Map(),\n    didBlur: new Map(),\n    refocus: new Map()\n  };\n  return _objectSpread({}, navigation, {}, Object.entries(helpers).reduce(function (acc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        name = _ref2[0],\n        method = _ref2[1];\n\n    if (name in navigation) {\n      acc[name] = function () {\n        return navigation.dispatch(method.apply(void 0, arguments));\n      };\n    }\n\n    return acc;\n  }, {}), {\n    original: navigation,\n    addListener: function addListener(type, callback) {\n      var unsubscribe;\n\n      switch (type) {\n        case 'willFocus':\n          unsubscribe = navigation.addListener('focus', callback);\n          break;\n\n        case 'willBlur':\n          unsubscribe = navigation.addListener('blur', callback);\n          break;\n\n        case 'didFocus':\n          {\n            var listener = function listener() {\n              if (navigation.isFocused()) {\n                callback();\n              }\n            };\n\n            unsubscribe = navigation.addListener('transitionEnd', listener);\n            context.subscriptions.didFocus.set(callback, unsubscribe);\n            break;\n          }\n\n        case 'didBlur':\n          {\n            var _listener = function _listener() {\n              if (!navigation.isFocused()) {\n                callback();\n              }\n            };\n\n            unsubscribe = navigation.addListener('transitionEnd', _listener);\n            context.subscriptions.didBlur.set(callback, unsubscribe);\n            break;\n          }\n\n        case 'refocus':\n          {\n            var _listener2 = function _listener2() {\n              if (navigation.isFocused()) {\n                callback();\n              }\n            };\n\n            unsubscribe = navigation.addListener('tabPress', _listener2);\n            context.subscriptions.refocus.set(callback, unsubscribe);\n            break;\n          }\n\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n\n        default:\n          unsubscribe = navigation.addListener(type, callback);\n      }\n\n      var subscription = function subscription() {\n        return unsubscribe();\n      };\n\n      subscription.remove = unsubscribe;\n      return subscription;\n    },\n    removeListener: function removeListener(type, callback) {\n      context.subscriptions = context.subscriptions || {};\n\n      switch (type) {\n        case 'willFocus':\n          navigation.removeListener('focus', callback);\n          break;\n\n        case 'willBlur':\n          navigation.removeListener('blur', callback);\n          break;\n\n        case 'didFocus':\n          {\n            var unsubscribe = context.subscriptions.didFocus.get(callback);\n            unsubscribe === null || unsubscribe === void 0 ? void 0 : unsubscribe();\n            break;\n          }\n\n        case 'didBlur':\n          {\n            var _unsubscribe = context.subscriptions.didBlur.get(callback);\n\n            _unsubscribe === null || _unsubscribe === void 0 ? void 0 : _unsubscribe();\n            break;\n          }\n\n        case 'refocus':\n          {\n            var _unsubscribe2 = context.subscriptions.refocus.get(callback);\n\n            _unsubscribe2 === null || _unsubscribe2 === void 0 ? void 0 : _unsubscribe2();\n            break;\n          }\n\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n\n        default:\n          navigation.removeListener(type, callback);\n      }\n    },\n    state: _objectSpread({}, state, {\n      routeName: state.name,\n\n      get index() {\n        if (state.index !== undefined) {\n          return state.index;\n        }\n\n        console.warn(\"Accessing child navigation state for a route is not safe and won't work correctly.\");\n        return state.state ? state.state.index : undefined;\n      },\n\n      get routes() {\n        if (state.routes !== undefined) {\n          return state.routes;\n        }\n\n        console.warn(\"Accessing child navigation state for a route is not safe and won't work correctly.\");\n        return state.state ? state.state.routes : undefined;\n      }\n\n    }),\n    getParam: function getParam(paramName, defaultValue) {\n      var params = state.params;\n\n      if (params && paramName in params) {\n        return params[paramName];\n      }\n\n      return defaultValue;\n    },\n    isFirstRouteInParent: function isFirstRouteInParent() {\n      if (typeof _isFirstRouteInParent === 'boolean') {\n        return _isFirstRouteInParent;\n      }\n\n      var _navigation$dangerous = navigation.dangerouslyGetState(),\n          routes = _navigation$dangerous.routes;\n\n      return routes[0].key === state.key;\n    },\n    dangerouslyGetParent: function dangerouslyGetParent() {\n      var parent = navigation.dangerouslyGetParent();\n\n      if (parent) {\n        return createCompatNavigationProp(parent, navigation.dangerouslyGetState(), context.parent);\n      }\n\n      return undefined;\n    }\n  });\n}","map":{"version":3,"sources":["createCompatNavigationProp.tsx"],"names":["context","didFocus","didBlur","refocus","name","acc","navigation","method","original","addListener","unsubscribe","listener","callback","subscription","removeListener","state","routeName","console","getParam","params","paramName","isFirstRouteInParent","routes","dangerouslyGetParent","parent","createCompatNavigationProp"],"mappings":"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","sourcesContent":["import {\n  NavigationState,\n  PartialState,\n  ParamListBase,\n  NavigationProp,\n  RouteProp,\n} from '@react-navigation/native';\nimport * as helpers from './helpers';\nimport { CompatNavigationProp } from './types';\n\ntype EventName =\n  | 'action'\n  | 'willFocus'\n  | 'willBlur'\n  | 'didFocus'\n  | 'didBlur'\n  | 'refocus';\n\n// const focusSubscriptions = new WeakMap<() => void, () => void>();\n// const blurSubscriptions = new WeakMap<() => void, () => void>();\n// const refocusSubscriptions = new WeakMap<() => void, () => void>();\n\nexport default function createCompatNavigationProp<\n  NavigationPropType extends NavigationProp<ParamListBase>,\n  ParamList extends ParamListBase = NavigationPropType extends NavigationProp<\n    infer P\n  >\n    ? P\n    : ParamListBase\n>(\n  navigation: NavigationPropType,\n  state:\n    | (RouteProp<ParamList, keyof ParamList> & {\n        state?: NavigationState | PartialState<NavigationState>;\n      })\n    | NavigationState\n    | PartialState<NavigationState>,\n  context: Record<string, any>,\n  isFirstRouteInParent?: boolean\n): CompatNavigationProp<NavigationPropType> {\n  context.parent = context.parent || {};\n  context.subscriptions = context.subscriptions || {\n    didFocus: new Map<() => void, () => void>(),\n    didBlur: new Map<() => void, () => void>(),\n    refocus: new Map<() => void, () => void>(),\n  };\n\n  return {\n    ...navigation,\n    ...Object.entries(helpers).reduce<{\n      [key: string]: (...args: any[]) => void;\n    }>((acc, [name, method]: [string, Function]) => {\n      if (name in navigation) {\n        acc[name] = (...args: any[]) => navigation.dispatch(method(...args));\n      }\n\n      return acc;\n    }, {}),\n    original: navigation,\n    addListener(type: EventName, callback: () => void) {\n      let unsubscribe: () => void;\n\n      switch (type) {\n        case 'willFocus':\n          unsubscribe = navigation.addListener('focus', callback);\n          break;\n        case 'willBlur':\n          unsubscribe = navigation.addListener('blur', callback);\n          break;\n        case 'didFocus': {\n          const listener = () => {\n            if (navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-ignore\n          unsubscribe = navigation.addListener('transitionEnd', listener);\n          context.subscriptions.didFocus.set(callback, unsubscribe);\n          break;\n        }\n        case 'didBlur': {\n          const listener = () => {\n            if (!navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-ignore\n          unsubscribe = navigation.addListener('transitionEnd', listener);\n          context.subscriptions.didBlur.set(callback, unsubscribe);\n          break;\n        }\n        case 'refocus': {\n          const listener = () => {\n            if (navigation.isFocused()) {\n              callback();\n            }\n          };\n\n          // @ts-ignore\n          unsubscribe = navigation.addListener('tabPress', listener);\n          context.subscriptions.refocus.set(callback, unsubscribe);\n          break;\n        }\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n        default:\n          // @ts-ignore\n          unsubscribe = navigation.addListener(type, callback);\n      }\n\n      const subscription = () => unsubscribe();\n\n      subscription.remove = unsubscribe;\n\n      return subscription;\n    },\n    removeListener(type: EventName, callback: () => void) {\n      context.subscriptions = context.subscriptions || {};\n\n      switch (type) {\n        case 'willFocus':\n          navigation.removeListener('focus', callback);\n          break;\n        case 'willBlur':\n          navigation.removeListener('blur', callback);\n          break;\n        case 'didFocus': {\n          const unsubscribe = context.subscriptions.didFocus.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'didBlur': {\n          const unsubscribe = context.subscriptions.didBlur.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'refocus': {\n          const unsubscribe = context.subscriptions.refocus.get(callback);\n          unsubscribe?.();\n          break;\n        }\n        case 'action':\n          throw new Error(\"Listening to 'action' events is not supported.\");\n        default:\n          // @ts-ignore\n          navigation.removeListener(type, callback);\n      }\n    },\n    state: {\n      ...state,\n      // @ts-ignore\n      routeName: state.name,\n      get index() {\n        // @ts-ignore\n        if (state.index !== undefined) {\n          // @ts-ignore\n          return state.index;\n        }\n\n        console.warn(\n          \"Accessing child navigation state for a route is not safe and won't work correctly.\"\n        );\n\n        // @ts-ignore\n        return state.state ? state.state.index : undefined;\n      },\n      get routes() {\n        // @ts-ignore\n        if (state.routes !== undefined) {\n          // @ts-ignore\n          return state.routes;\n        }\n\n        console.warn(\n          \"Accessing child navigation state for a route is not safe and won't work correctly.\"\n        );\n\n        // @ts-ignore\n        return state.state ? state.state.routes : undefined;\n      },\n    },\n    getParam<T extends keyof ParamList>(\n      paramName: T,\n      defaultValue: ParamList[T]\n    ): ParamList[T] {\n      // @ts-ignore\n      const params = state.params;\n\n      if (params && paramName in params) {\n        return params[paramName];\n      }\n\n      return defaultValue;\n    },\n    isFirstRouteInParent(): boolean {\n      if (typeof isFirstRouteInParent === 'boolean') {\n        return isFirstRouteInParent;\n      }\n\n      const { routes } = navigation.dangerouslyGetState();\n\n      // @ts-ignore\n      return routes[0].key === state.key;\n    },\n    dangerouslyGetParent() {\n      const parent = navigation.dangerouslyGetParent();\n\n      if (parent) {\n        return createCompatNavigationProp(\n          parent,\n          navigation.dangerouslyGetState(),\n          context.parent\n        );\n      }\n\n      return undefined;\n    },\n  } as any;\n}\n"]},"metadata":{},"sourceType":"module"}