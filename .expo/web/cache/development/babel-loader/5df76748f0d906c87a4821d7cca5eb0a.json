{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport useCompatNavigation from \"./useCompatNavigation\";\nexport default function withNavigation(Comp) {\n  var WrappedComponent = function WrappedComponent(_ref) {\n    var onRef = _ref.onRef,\n        rest = _objectWithoutProperties(_ref, [\"onRef\"]);\n\n    var navigation = useCompatNavigation();\n    return React.createElement(Comp, _extends({\n      ref: onRef,\n      navigation: navigation\n    }, rest));\n  };\n\n  WrappedComponent.displayName = \"withNavigation(\".concat(Comp.displayName || Comp.name, \")\");\n  return WrappedComponent;\n}","map":{"version":3,"sources":["withNavigation.tsx"],"names":["WrappedComponent","onRef","rest","navigation","useCompatNavigation","Comp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,mBAAA;AAOA,eAAe,SAAA,cAAA,CAAA,IAAA,EAIJ;AACT,MAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAOC;AAPA,QACxBC,KADwB,GAOA,IAPA,CACxBA,KADwB;AAAA,QAErBC,IAFqB,GAOA,wBAAA,CAAA,IAAA,EAAA,CAAA,OAAA,CAAA,CAPA;;AAQxB,QAAMC,UAAU,GAAGC,mBADK,EACxB;AAGA,WAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,MAAA,GAAG,EAAT,KAAA;AAAkB,MAAA,UAAU,EAAED;AAA9B,KAAA,EAAP,IAAO,CAAA,CAAP;AAXF,GAAA;;AAcAH,EAAAA,gBAAgB,CAAhBA,WAAAA,GAAAA,kBAAAA,MAAAA,CAAiDK,IAAI,CAAJA,WAAAA,IAC/CA,IAAI,CADNL,IAAAA,EAAAA,GAAAA,CAAAA;AAGA,SAAA,gBAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { NavigationProp, ParamListBase } from '@react-navigation/native';\nimport useCompatNavigation from './useCompatNavigation';\nimport { CompatNavigationProp } from './types';\n\ntype InjectedProps<T extends NavigationProp<ParamListBase>> = {\n  navigation: CompatNavigationProp<T>;\n};\n\nexport default function withNavigation<\n  T extends NavigationProp<ParamListBase>,\n  P extends InjectedProps<T>,\n  C extends React.ComponentType<P>\n>(Comp: C) {\n  const WrappedComponent = ({\n    onRef,\n    ...rest\n  }: Exclude<P, InjectedProps<T>> & {\n    onRef?: C extends React.ComponentClass<any>\n      ? React.Ref<InstanceType<C>>\n      : never;\n  }): React.ReactElement => {\n    const navigation = useCompatNavigation<T>();\n\n    // @ts-ignore\n    return <Comp ref={onRef} navigation={navigation} {...rest} />;\n  };\n\n  WrappedComponent.displayName = `withNavigation(${Comp.displayName ||\n    Comp.name})`;\n\n  return WrappedComponent;\n}\n"]},"metadata":{},"sourceType":"module"}