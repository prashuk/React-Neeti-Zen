{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport CompatScreen from \"./CompatScreen\";\nimport ScreenPropsContext from \"./ScreenPropsContext\";\nimport createCompatNavigationProp from \"./createCompatNavigationProp\";\nexport default function createCompatNavigatorFactory(createNavigator) {\n  if (createNavigator.isCompat) {\n    throw new Error(\"The navigator is already in compat mode. You don't need to wrap it in 'createCompatNavigatorFactory'.\");\n  }\n\n  var createCompatNavigator = function createCompatNavigator(routeConfig) {\n    var navigationConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var Pair = createNavigator();\n\n    var order = navigationConfig.order,\n        defaultNavigationOptions = navigationConfig.defaultNavigationOptions,\n        parentNavigationOptions = navigationConfig.navigationOptions,\n        restConfig = _objectWithoutProperties(navigationConfig, [\"order\", \"defaultNavigationOptions\", \"navigationOptions\"]);\n\n    var routeNames = order !== undefined ? order : Object.keys(routeConfig);\n\n    function Navigator(_ref) {\n      var screenProps = _ref.screenProps;\n      var screens = React.useMemo(function () {\n        return routeNames.map(function (name) {\n          var getScreenComponent;\n          var initialParams;\n          var routeConfigItem = routeConfig[name];\n\n          if ('getScreen' in routeConfigItem) {\n            getScreenComponent = routeConfigItem.getScreen;\n            initialParams = routeConfigItem.params;\n          } else if ('screen' in routeConfigItem) {\n            getScreenComponent = function getScreenComponent() {\n              return routeConfigItem.screen;\n            };\n\n            initialParams = routeConfigItem.params;\n          } else {\n            getScreenComponent = function getScreenComponent() {\n              return routeConfigItem;\n            };\n          }\n\n          var screenOptions = function screenOptions(_ref2) {\n            var navigation = _ref2.navigation,\n                route = _ref2.route;\n            var routeNavigationOptions = routeConfigItem.navigationOptions;\n            var screenNavigationOptions = getScreenComponent().navigationOptions;\n\n            if (routeNavigationOptions == null && screenNavigationOptions == null) {\n              return undefined;\n            }\n\n            var options = typeof routeNavigationOptions === 'function' || typeof screenNavigationOptions === 'function' ? {\n              navigation: createCompatNavigationProp(navigation, route, {}),\n              navigationOptions: defaultNavigationOptions || {},\n              screenProps: screenProps\n            } : {};\n            return _objectSpread({}, typeof routeNavigationOptions === 'function' ? routeNavigationOptions(options) : routeNavigationOptions, {}, typeof screenNavigationOptions === 'function' ? screenNavigationOptions(options) : screenNavigationOptions);\n          };\n\n          return React.createElement(Pair.Screen, {\n            key: name,\n            name: name,\n            initialParams: initialParams,\n            options: screenOptions\n          }, function (_ref3) {\n            var navigation = _ref3.navigation,\n                route = _ref3.route;\n            return React.createElement(CompatScreen, {\n              navigation: navigation,\n              route: route,\n              component: getScreenComponent()\n            });\n          });\n        });\n      }, [screenProps]);\n      return React.createElement(ScreenPropsContext.Provider, {\n        value: screenProps\n      }, React.createElement(Pair.Navigator, _extends({}, restConfig, {\n        screenOptions: defaultNavigationOptions\n      }), screens));\n    }\n\n    Navigator.navigationOtions = parentNavigationOptions;\n    return Navigator;\n  };\n\n  Object.defineProperties(createCompatNavigator, {\n    isCompat: {\n      get: function get() {\n        return true;\n      }\n    },\n    router: {\n      get: function get() {\n        throw new Error(\"It's no longer possible to access the router with the 'router' property.\");\n      },\n      set: function set() {\n        throw new Error(\"It's no longer possible to override the router by assigning the 'router' property.\");\n      }\n    }\n  });\n  return createCompatNavigator;\n}","map":{"version":3,"sources":["createCompatNavigatorFactory.tsx"],"names":["createNavigator","createCompatNavigator","navigationConfig","Pair","navigationOptions","parentNavigationOptions","routeNames","order","Object","screenProps","screens","name","routeConfigItem","routeConfig","getScreenComponent","initialParams","screenOptions","route","routeNavigationOptions","screenNavigationOptions","options","navigation","createCompatNavigationProp","defaultNavigationOptions","Navigator","isCompat","get","router","set"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  NavigationState,\n  PartialState,\n  ParamListBase,\n  TypedNavigator,\n  NavigationProp,\n  RouteProp,\n  EventMapBase,\n} from '@react-navigation/native';\nimport CompatScreen from './CompatScreen';\nimport ScreenPropsContext from './ScreenPropsContext';\nimport createCompatNavigationProp from './createCompatNavigationProp';\nimport { CompatScreenType, CompatRouteConfig } from './types';\n\nexport default function createCompatNavigatorFactory<\n  CreateNavigator extends () => TypedNavigator<\n    ParamListBase,\n    NavigationState,\n    {},\n    EventMapBase,\n    React.ComponentType<any>\n  >\n>(createNavigator: CreateNavigator) {\n  // @ts-ignore\n  if (createNavigator.isCompat) {\n    throw new Error(\n      `The navigator is already in compat mode. You don't need to wrap it in 'createCompatNavigatorFactory'.`\n    );\n  }\n\n  const createCompatNavigator = <\n    NavigationPropType extends NavigationProp<any, any, any, any, any>,\n    ParamList extends ParamListBase = NavigationPropType extends NavigationProp<\n      infer P\n    >\n      ? P\n      : ParamListBase,\n    ScreenOptions extends {} = NavigationPropType extends NavigationProp<\n      any,\n      any,\n      any,\n      infer O\n    >\n      ? O\n      : {},\n    NavigationConfig extends {} = React.ComponentProps<\n      ReturnType<CreateNavigator>['Navigator']\n    >\n  >(\n    routeConfig: CompatRouteConfig<NavigationPropType>,\n    navigationConfig: Partial<Omit<NavigationConfig, 'screenOptions'>> & {\n      order?: Extract<keyof ParamList, string>[];\n      defaultNavigationOptions?: ScreenOptions;\n      navigationOptions?: Record<string, any>;\n    } = {}\n  ) => {\n    const Pair = createNavigator();\n\n    const {\n      order,\n      defaultNavigationOptions,\n      navigationOptions: parentNavigationOptions,\n      ...restConfig\n    } = navigationConfig;\n\n    const routeNames = order !== undefined ? order : Object.keys(routeConfig);\n\n    function Navigator({ screenProps }: { screenProps?: unknown }) {\n      const screens = React.useMemo(\n        () =>\n          routeNames.map(name => {\n            let getScreenComponent: () => CompatScreenType<NavigationPropType>;\n\n            let initialParams;\n\n            const routeConfigItem = routeConfig[name];\n\n            if ('getScreen' in routeConfigItem) {\n              getScreenComponent = routeConfigItem.getScreen;\n              initialParams = routeConfigItem.params;\n            } else if ('screen' in routeConfigItem) {\n              getScreenComponent = () => routeConfigItem.screen;\n              initialParams = routeConfigItem.params;\n            } else {\n              getScreenComponent = () => routeConfigItem;\n            }\n\n            const screenOptions = ({\n              navigation,\n              route,\n            }: {\n              navigation: NavigationPropType;\n              route: RouteProp<ParamList, keyof ParamList> & {\n                state?: NavigationState | PartialState<NavigationState>;\n              };\n            }) => {\n              // @ts-ignore\n              const routeNavigationOptions = routeConfigItem.navigationOptions;\n              const screenNavigationOptions = getScreenComponent()\n                .navigationOptions;\n\n              if (\n                routeNavigationOptions == null &&\n                screenNavigationOptions == null\n              ) {\n                return undefined;\n              }\n\n              const options =\n                typeof routeNavigationOptions === 'function' ||\n                typeof screenNavigationOptions === 'function'\n                  ? {\n                      navigation: createCompatNavigationProp<\n                        NavigationPropType\n                      >(navigation, route, {}),\n                      navigationOptions: defaultNavigationOptions || {},\n                      screenProps,\n                    }\n                  : {};\n\n              return {\n                ...(typeof routeNavigationOptions === 'function'\n                  ? routeNavigationOptions(options)\n                  : routeNavigationOptions),\n                ...(typeof screenNavigationOptions === 'function'\n                  ? (screenNavigationOptions as (o: any) => ScreenOptions)(\n                      options\n                    )\n                  : screenNavigationOptions),\n              } as ScreenOptions;\n            };\n\n            return (\n              <Pair.Screen\n                key={name}\n                name={name}\n                initialParams={initialParams}\n                options={screenOptions}\n              >\n                {({ navigation, route }) => (\n                  <CompatScreen\n                    navigation={navigation}\n                    route={route}\n                    component={getScreenComponent()}\n                  />\n                )}\n              </Pair.Screen>\n            );\n          }),\n        [screenProps]\n      );\n\n      return (\n        <ScreenPropsContext.Provider value={screenProps}>\n          <Pair.Navigator\n            {...(restConfig as NavigationConfig)}\n            screenOptions={defaultNavigationOptions}\n          >\n            {screens}\n          </Pair.Navigator>\n        </ScreenPropsContext.Provider>\n      );\n    }\n\n    Navigator.navigationOtions = parentNavigationOptions;\n\n    return Navigator;\n  };\n\n  Object.defineProperties(createCompatNavigator, {\n    isCompat: {\n      get() {\n        return true;\n      },\n    },\n    router: {\n      get() {\n        throw new Error(\n          \"It's no longer possible to access the router with the 'router' property.\"\n        );\n      },\n      set() {\n        throw new Error(\n          \"It's no longer possible to override the router by assigning the 'router' property.\"\n        );\n      },\n    },\n  });\n\n  return createCompatNavigator;\n}\n"]},"metadata":{},"sourceType":"module"}