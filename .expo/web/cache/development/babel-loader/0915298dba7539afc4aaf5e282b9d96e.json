{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { CommonActions } from '@react-navigation/native';\nexport function navigate(_ref) {\n  var routeName = _ref.routeName,\n      params = _ref.params,\n      key = _ref.key,\n      action = _ref.action;\n\n  if (action !== undefined) {\n    throw new Error('Sub-actions are not supported for `navigate`. Remove the `action` key from the options.');\n  }\n\n  return CommonActions.navigate({\n    name: routeName,\n    key: key,\n    params: params\n  });\n}\nexport function back(options) {\n  return (options === null || options === void 0 ? void 0 : options.key) != null ? function (state) {\n    return _objectSpread({}, CommonActions.goBack(), {\n      source: options.key,\n      target: state.key\n    });\n  } : CommonActions.goBack();\n}\nexport function setParams(_ref2) {\n  var params = _ref2.params,\n      key = _ref2.key;\n  return _objectSpread({}, CommonActions.setParams(params), {}, key !== undefined ? {\n    source: key\n  } : null);\n}","map":{"version":3,"sources":["NavigationActions.tsx"],"names":["action","name","key","params","state","CommonActions","source","options","target"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,aAAA,QAAA,0BAAA;AAEA,OAAO,SAAA,QAAA,CAAA,IAAA,EAUkB;AAAA,MAVA,SAUA,GAAA,IAAA,CAVA,SAUA;AAAA,MAVA,MAUA,GAAA,IAAA,CAVA,MAUA;AAAA,MAVA,GAUA,GAAA,IAAA,CAVA,GAUA;AAAA,MANvBA,MAMuB,GAAA,IAAA,CANvBA,MAMuB;;AACvB,MAAIA,MAAM,KAAV,SAAA,EAA0B;AACxB,UAAM,IAAA,KAAA,CAAN,yFAAM,CAAN;AAGD;;AAED,SAAO,aAAa,CAAb,QAAA,CAAuB;AAC5BC,IAAAA,IAAI,EADwB,SAAA;AAE5BC,IAAAA,GAAG,EAFyB,GAAA;AAG5BC,IAAAA,MAAM,EAAEA;AAHoB,GAAvB,CAAP;AAKD;AAED,OAAO,SAAA,IAAA,CAAA,OAAA,EAAiD;AACtD,SAAO,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,GAAA,KAAA,IAAA,GACFC,UAAAA,KAAD;AAAA,WAAA,aAAA,CAAA,EAAA,EACKC,aAAa,CADlB,MACKA,EADL,EAAA;AAEEC,MAAAA,MAAM,EAAEC,OAAO,CAFjB,GAAA;AAGEC,MAAAA,MAAM,EAAEJ,KAAK,CAACF;AAHhB,KAAA,CAAA;AAAA,GADG,GAMHG,aAAa,CANjB,MAMIA,EANJ;AAOD;AAED,OAAO,SAAA,SAAA,CAAA,KAAA,EAMkB;AAAA,MANC,MAMD,GAAA,KAAA,CANC,MAMD;AAAA,MAJvBH,GAIuB,GAAA,KAAA,CAJvBA,GAIuB;AACvB,SAAA,aAAA,CAAA,EAAA,EACKG,aAAa,CAAbA,SAAAA,CADL,MACKA,CADL,EAAA,EAAA,EAEM,GAAG,KAAH,SAAA,GAAoB;AAAEC,IAAAA,MAAM,EAAEJ;AAAV,GAApB,GAFN,IAAA,CAAA;AAID","sourcesContent":["import { CommonActions, NavigationState } from '@react-navigation/native';\n\nexport function navigate({\n  routeName,\n  params,\n  key,\n  action,\n}: {\n  routeName: string;\n  params?: object;\n  key?: string;\n  action?: never;\n}): CommonActions.Action {\n  if (action !== undefined) {\n    throw new Error(\n      'Sub-actions are not supported for `navigate`. Remove the `action` key from the options.'\n    );\n  }\n\n  return CommonActions.navigate({\n    name: routeName,\n    key: key,\n    params: params,\n  });\n}\n\nexport function back(options?: { key?: null | string }) {\n  return options?.key != null\n    ? (state: NavigationState) => ({\n        ...CommonActions.goBack(),\n        source: options.key,\n        target: state.key,\n      })\n    : CommonActions.goBack();\n}\n\nexport function setParams({\n  params,\n  key,\n}: {\n  params: object;\n  key?: string;\n}): CommonActions.Action {\n  return {\n    ...CommonActions.setParams(params),\n    ...(key !== undefined ? { source: key } : null),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}