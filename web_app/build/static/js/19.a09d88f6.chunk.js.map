{"version":3,"sources":["App/components/UcFirst.js","Demo/UIElements/Basic/Button.js","App/components/MainCard.js"],"names":["UcFirst","string","this","props","text","charAt","toUpperCase","slice","React","Component","BasicButton","buttonVariants","buttonOptions","variant","icon","basicButtons","map","idx","key","overlay","outlineButtons","squareButtons","className","basicDropdownButton","button","title","id","Item","eventKey","splitDropdownButton","Divider","MainCard","state","isOption","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","alignRight","Toggle","Menu","as","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","children","windowSize"],"mappings":"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","file":"static/js/19.a09d88f6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass UcFirst extends React.Component {\r\n    render() {\r\n        const string = this.props.text;\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n}\r\n\r\nexport default UcFirst;","import React from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    OverlayTrigger,\r\n    Tooltip,\r\n    ButtonToolbar,\r\n    Dropdown,\r\n    DropdownButton,\r\n    SplitButton\r\n} from 'react-bootstrap';\r\n\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport Card from \"../../../App/components/MainCard\";\r\nimport UcFirst from \"../../../App/components/UcFirst\";\r\n\r\nclass BasicButton extends React.Component {\r\n    render() {\r\n        const buttonVariants = [\r\n            'primary',\r\n            'secondary',\r\n            'success',\r\n            'danger',\r\n            'warning',\r\n            'info',\r\n            'light',\r\n            'dark',\r\n        ];\r\n\r\n        const buttonOptions = [\r\n            {variant: 'primary', icon:'feather icon-thumbs-up'},\r\n            {variant: 'secondary', icon:'feather icon-camera'},\r\n            {variant: 'success', icon:'feather icon-check-circle'},\r\n            {variant: 'danger', icon:'feather icon-slash'},\r\n            {variant: 'warning', icon:'feather icon-alert-triangle'},\r\n            {variant: 'info', icon:'feather icon-info'}\r\n        ];\r\n\r\n        const basicButtons = buttonVariants.map((variant, idx) => (\r\n            <OverlayTrigger key={idx} overlay={<Tooltip>{variant}</Tooltip>}>\r\n                <Button variant={variant}><UcFirst text={variant} /></Button>\r\n            </OverlayTrigger>\r\n        ));\r\n\r\n        const outlineButtons = buttonVariants.map((variant, idx) => (\r\n            <OverlayTrigger key={idx} overlay={<Tooltip>{'outline-'+variant}</Tooltip>}>\r\n                <Button variant={'outline-'+variant}><UcFirst text={variant} /></Button>\r\n            </OverlayTrigger>\r\n        ));\r\n\r\n        const squareButtons = buttonVariants.map((variant, idx) => <Button key={idx} className='btn-square' variant={variant}><UcFirst text={variant} /></Button>);\r\n\r\n\r\n        const basicDropdownButton = buttonOptions.map(\r\n            button => {\r\n                const title = <UcFirst text={button.variant} />;\r\n                return (\r\n                <DropdownButton\r\n                    title={title}\r\n                    variant={button.variant}\r\n                    id={`dropdown-variants-${button.variant}`}\r\n                    key={button.variant}\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\r\n                </DropdownButton>\r\n            );\r\n        });\r\n\r\n        const splitDropdownButton = buttonOptions.map(\r\n            button => {\r\n                const title = <UcFirst text={button.variant} />;\r\n                return (\r\n                <SplitButton\r\n                    title={title}\r\n                    variant={button.variant}\r\n                    id={`dropdown-split-variants-${button.variant}`}\r\n                    key={button.variant}\r\n                    className=\"mr-2 mb-2\"\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\r\n                </SplitButton>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card title=\"Default\">\r\n                            <p>use <code>variant=\"*\"</code> props in component <code>Button</code> to get various button</p>\r\n                            {basicButtons}\r\n                            <OverlayTrigger overlay={<Tooltip>link</Tooltip>}>\r\n                                <Button variant=\"link\">Link</Button>\r\n                            </OverlayTrigger>\r\n                        </Card>\r\n                        <Card title=\"Outline\">\r\n                            <p>use <code>variant=\"outline-*\"</code> props in component <code>Button</code> to get various outline button</p>\r\n                            {outlineButtons}\r\n                        </Card>\r\n                        <Card title=\"Square Button\">\r\n                            <p>use <code>className=\"btn-square\"</code> props in component <code>Button</code> to get square button</p>\r\n                            {squareButtons}\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Card title=\"Basic Dropdown Button\">\r\n                            <ButtonToolbar>\r\n                                {basicDropdownButton}\r\n                            </ButtonToolbar>\r\n                        </Card>\r\n                        <Card title=\"Split Dropdown Button\">\r\n                            <ButtonToolbar>\r\n                                {splitDropdownButton}\r\n                            </ButtonToolbar>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BasicButton;\r\n","import React, {Component} from 'react';\r\nimport {Dropdown, Card, Collapse} from 'react-bootstrap';\r\nimport windowSize from 'react-window-size';\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\nclass MainCard extends Component {\r\n    state = {\r\n        isOption: this.props.isOption,\r\n        fullCard: false,\r\n        collapseCard: false,\r\n        loadCard: false,\r\n        cardRemove: false\r\n    };\r\n\r\n    cardReloadHandler = () => {\r\n        this.setState({loadCard: true});\r\n        setInterval(() => {\r\n            this.setState({loadCard: false});\r\n        }, 3000);\r\n    };\r\n\r\n    cardRemoveHandler = () => {\r\n        this.setState({cardRemove: true});\r\n    };\r\n\r\n    render() {\r\n        let fullScreenStyle, loader, cardHeaderRight, cardHeader;\r\n        let card = '';\r\n        let cardClass = [];\r\n\r\n        if (this.state.isOption) {\r\n            cardHeaderRight = (\r\n                <div className=\"card-header-right\">\r\n                    <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n                        <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n                            <i className=\"feather icon-more-horizontal\"/>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu as='ul' className=\"list-unstyled card-option\">\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {fullCard: !prevState.fullCard}})}}>\r\n                                <i className={this.state.fullCard ? 'feather icon-minimize' : 'feather icon-maximize'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.fullCard ? 'Restore' : 'Maximize'} </a>\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => {this.setState(prevState => {return {collapseCard: !prevState.collapseCard}})}}>\r\n                                <i className={this.state.collapseCard ? 'feather icon-plus' : 'feather icon-minus'}/>\r\n                                <a href={DEMO.BLANK_LINK}> {this.state.collapseCard ? 'Expand' : 'Collapse'} </a>\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardReloadHandler}>\r\n                                <i className='feather icon-refresh-cw'/>\r\n                                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item as='li' className=\"dropdown-item\" onClick={this.cardRemoveHandler}>\r\n                                <i className='feather icon-trash'/>\r\n                                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n                            </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        cardHeader = (\r\n            <Card.Header>\r\n                <Card.Title as='h5'>{this.props.title}</Card.Title>\r\n                {cardHeaderRight}\r\n            </Card.Header>\r\n        );\r\n\r\n        if (this.state.fullCard) {\r\n            cardClass = [...cardClass, 'full-card'];\r\n            fullScreenStyle = {position: 'fixed', top: 0, left: 0, right: 0, width: this.props.windowWidth, height: this.props.windowHeight};\r\n        }\r\n\r\n        if (this.state.loadCard) {\r\n            cardClass = [...cardClass, 'card-load'];\r\n            loader = (\r\n                <div className=\"card-loader\">\r\n                    <i className=\"pct-loader1 anim-rotate\"/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (this.state.cardRemove) {\r\n            cardClass = [...cardClass, 'd-none'];\r\n        }\r\n\r\n        if (this.props.cardClass) {\r\n            cardClass = [...cardClass, this.props.cardClass];\r\n        }\r\n\r\n        card = (\r\n            <Card className={cardClass.join(' ')} style={fullScreenStyle}>\r\n                {cardHeader}\r\n                <Collapse in={!this.state.collapseCard}>\r\n                    <div>\r\n                        <Card.Body>\r\n                            {this.props.children}\r\n                        </Card.Body>\r\n                    </div>\r\n                </Collapse>\r\n                {loader}\r\n            </Card>\r\n        );\r\n\r\n        return (\r\n            <Aux>\r\n                {card}\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default windowSize(MainCard);\r\n"],"sourceRoot":""}